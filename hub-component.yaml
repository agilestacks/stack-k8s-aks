---
version: 1
kind: component
meta:
  name: stack-k8s-aks
  brief: Azure AKS
  source:
      dir: ../../stack-k8s-aks/

requires:
  - azure
provides:
  - kubernetes

lifecycle:
  verbs:
    - deploy
    - undeploy
  readyConditions:
    - dns: ${kubernetes.api.endpoint}
      url: https://${kubernetes.api.endpoint}

parameters:
  - name: cloud.kind
    value: azure
  - name: kubernetes.aks.cluster
    env: CLUSTER_NAME
    value: ${dns.name}
  - name: kubernetes.flavor
    value: aks
  - name: dns.domain
    env: DOMAIN_NAME
  - name: cloud.region
    env: TF_VAR_location
  - name: cloud.azureResourceGroupName
    env: TF_VAR_resource_group_name

  - name: terraform.bucket.name
    env: STATE_BUCKET
  - name: terraform.bucket.region
    env: STATE_REGION

  - name: component.kubernetes
    parameters:
    - name: serviceaccount
      value: asi
      env: SERVICE_ACCOUNT
    - name: aks
      parameters:
      - name: agentCount
        env: TF_VAR_agent_count
      - name: agentVmSize
        env: TF_VAR_agent_vm_size
        value: Standard_DS1_v2
      - name: agentVmOs
        env: TF_VAR_agent_vm_os
        value: Linux
      - name: version
        env: TF_VAR_k8s_version
      - name: agentSshPubKey
        env: TF_VAR_ssh_public_key
      - name: virtualNodes
        env: TF_VAR_virtual_nodes

outputs:
  - name: cloud.kind
  - name: cloud.region
  - name: dns.domain
  - name: dns.name
    fromTfVar: dns_name
  - name: dns.baseDomain
    fromTfVar: dns_base_domain
  - name: kubernetes.flavor
  - name: kubernetes.api.host
    fromTfVar: fqdn
  - name: kubernetes.api.port
    value: 443
  - name: kubernetes.api.endpoint
    value: ${kubernetes.api.host}:${kubernetes.api.port}
  - name: kubernetes.api.caCert
    fromTfVar: api_ca_crt
  - name: kubernetes.api.token
    fromTfVar: token





